"""
Основная теорема арифметики для решения 25 задания на делители
- Теорема -
Всякое натуральное число n можно разложить в виде:
n = p1**a1 * p2**a2 * ... * pk**ak,
где p1..pk простые числа, a1..ak натуральные числа
* Причем разложить n можно в единственном виде

Из этой теоремы выводится следующее свойство:
* У числа n ровно C делителей (включая 1 и n), где C = (a1+1) * (a2+1) * ... (ak+1)

Зная количество делителей можно определить количество p:
- Примеры -
1) Пусть у числа n ровно 5 делителей (C = 5), тогда
C = 5 * 1 * 1 * ... * 1 -> количество p = 1 -> a1 = 4 ->
n можно представить в виде: p**0 * p**4, p**1 * p**3, p**2 * p**2,
Делители n: p**0 < p**1 < p**2 < p**3 < p**4 (p**0 - это 1, p**4 - это n)

2) Пусть у числа n ровно 9 делителей (C = 9), тогда
    1. C = 9 * 1 * 1 * ... * 1 -> k = 1 -> a1 = 8 ->
Делители n: 1 < p < p**2 < p**3 < ... < p**8
    2. C = 3 * 3 * 1 * ... * 1 -> k = 2 -> a1 = 2, a2 = 2 ->
Делители n: 1, p1, p1**2, p2, p2**2, p1 * p2, p1**2 * p2, p1 * p**2, p1**2 * p2**2

25 задания про делители на применения ОТА в основном делятся на 5 видов:
У числа n:
1) Ровно A делителей
n = p1**a1 * p2**a2 * ... * pk**ak
C = A = (a1+1) * (a2+1) * ... (ak+1)

2) Ровно A четных делителей
n = 2**a1
С = A = a1 + 1
* Доказательство интуитивное - все простые числа, кроме 2, нечетные

3) Ровно A нечетных делителей
* Здесь наоборот - 2 исключаем из p (или же просто рассматриваем только нечетные n)
n = p1**a1 * p2**a2 * ... * pk**ak (2 not in {p1..pk})
C = A = (a1+1) * (a2+1) * ... (ak+1)

4) Ровно A четных делителей (количество нечетных может быть любым)
* Четные делители числа: 2 и все произведения p1**[0..a1]..pk**[0..ak] c 2
* Рассматриваем только четные числа, поскольку у нечетных нет четных делителей
n = 2**a1 * p2**a2 * ... * pk**ak
C = A = (a1+1) * (a2+1) * ... (ak+1)
* Однако рассматривая только четные числа 2 гарантированно будет в p1..pk
поэтому и формула n будет как в 1)

5) Ровно A нечетных делителей (количество четных может быть любым)
* Поскольку четных может быть любое количество, то вынесем их как 2**i (i int in 0..inf)
n = 2**i * p1**a1 * p2**a2 * ... * pk**ak
C = (i+1) * (a1+1) * (a2+1) * ... (ak+1),
A = (a1+1) * (a2+1) * ... (ak+1)
* В заданиях будем сперва избавляться от 2 в числе, затем подбирать p1..pk
"""