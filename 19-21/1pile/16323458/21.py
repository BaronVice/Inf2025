# 0 - первый ход Пети
# 1 - первый ход Вани
# 2 - второй ход Пети
# 3 - второй ход Вани

# Условие1: у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети
# Условие2: у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом
# Найдите два таких значения S, при которых у Пети есть выигрышная стратегия.

# game(n, turn) - состояние игры, при котором количество камней в куче n, ход turn
# Вернет 1, если Условие1 и Условие2 соблюдаются, иначе 0
def game(n, turn):
    if turn == 0: # первый ход Пети
        # Выиграть должен Ваня
        if n * 5 >= 70: return 0
        # у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом:
        # - Рассмотрим все возможные ходы Пети: (n + 1), (n + 4), (n * 5)
        # - Проверим, может ли Ваня выиграть из каждого (например для (n + 1) это (n + 1) * 5 >= 70)
        # - Если Ваня выигрывает из всех ходов Пети, то условие не выполняется
        if (n + 1) * 5 >= 70 and (n + 4) * 5 >= 70 and (n * 5) * 5 >= 70: return 0
    if turn == 1: # первый ход Вани
        # Ваня может выиграть первым ходом
        if n * 5 >= 70: return 1
    if turn == 2: # второй ход Пети
        # Выиграть должен Ваня
        if n * 5 >= 70: return 0
    if turn == 3: # второй ход Вани
        # Если Ваня не выиграл первым ходом, то должен выиграть вторым
        return n * 5 >= 70

    if turn % 2 == 0: # Петя
        # ... при любой игре Пети -> из всех ходов Пети Ваня должен выиграть
        return game(n + 1, turn + 1) and game(n + 4, turn + 1) and game(n * 5, turn + 1)
    else: # Ваня
        # один из текущих ходов Вани должен привести его к победе
        return game(n + 1, turn + 1) or game(n + 4, turn + 1) or game(n * 5, turn + 1)

for s in range(1, 69 + 1):
    if game(s, 0) == 1:
        print(s)
        # Первое значение - 8. Оно же минимальное и будет ответом на задачу
